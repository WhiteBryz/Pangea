@page "/incomes"
@rendermode InteractiveServer
@inject IRepositoryIncome _repository;
@inject NavigationManager _navigator

<h3>INGRESOS</h3>

<a class=" btn btn-success" href="/incomes/new">
	<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
		<path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
		<path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
	</svg>
	Agregar Ingreso
</a>

@if (_incomes == null)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Cargando...</span>
	</div>
}
else if (_incomes.Count == 0)
{
	<h3>No existen ingresos registrados.</h3>
}
else
{
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Fecha de Registro</th>
				<th>Fecha de Pago</th>
				<th>Super Usuario</th>
				<th>Mes Pagado</th>
				<th>Año</th>
				<th>Número de Orden</th>
				<th>Método de Pago</th>
				<th>Num. Casa</th>
				<th>Dueño</th>
				<th>Concepto</th>
				<th>Monto</th>
				<th>Estátus</th>
				<th>Comentarios</th>
				<th>Acciones</th>
			</tr>
		</thead>
		<tbody style="font-size:small;">
			<tr class="table-info">
				<td title="Fecha-Registro"></td>
				<td title="Fecha-Pago">
					<button @onclick="OrderByPaidDate" class="btn btn-secondary">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
							<path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5m-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5" />
						</svg>
					</button>
				</td>
				<td title="Super-Ususario"></td>
				<td title="Mes-pagado"></td>
				<td title="Año"></td>
				<td title="Numero-Orden">
					<button @onclick="OrderByOrderNum" class="btn btn-secondary">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
							<path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5m-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5" />
						</svg>
					</button>
				</td>
				<td title="Metodo-Pago"></td>
				<td title="Numero-Casa"></td>
				<td title="Dueño"></td>
				<td title="Concepto"></td>
				<td title="Monto"></td>
				<td title="Estatus"></td>
				<td title="Comentarios"></td>
				<td title="Acciones"></td>
			</tr>
			@foreach (Income income in _incomes)
			{
				<tr>
					<td>@income.RegisterDate.ToString("dd/MM/yyyy")</td>
					<td>@income.PaidDate.ToString("dd/MM/yyyy")</td>
					<td>@income.UserAdmin.AdminName</td>
					<td>
						@if(monthsOfYear.ContainsKey(income.ApplicableMonth))
						{
							@monthsOfYear[income.ApplicableMonth]
						}
						else
						{
							<span>N/A</span>
						}
					</td>
					<td>@income.ApplicableYear</td>
					<td>@income.OrderNum</td>
					<td>@income.PaidMethod</td>
					<td>@income.Owner.HouseNumber</td>
					<td>@income.Owner.OwnerName</td>
					<td>@income.IncomeConcept.Concept</td>
					<td><span>$</span>@income.Amount.ToString("F2")</td>
					<td>@income.PaidStatus</td>
					<td>@income.Comments</td>
					<td>
						<button class="btn btn-sm" title="Edit" @onclick="()=>Edit(income.Id)">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
								<path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
								<path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
							</svg>
						</button>
						<button class="btn btn-sm" title="Delate" @onclick="()=>Delete(income)">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
								<path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47M8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
							</svg>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Income>? _incomes;
	private Boolean _isAscendingPaidDate = true;
	private Boolean _isAscendingOrderNum = true;

	Dictionary<int, string> monthsOfYear = new Dictionary<int, string>
		{
			{1, "Enero"},
			{2, "Febrero"},
			{3, "Marzo"},
			{4, "Abril"},
			{5, "Mayo"},
			{6, "Junio"},
			{7, "Julio"},
			{8, "Agosto"},
			{9, "Septiembre"},
			{10, "Octubre"},
			{11, "Noviembre"},
			{12, "Diciembre"}
		};

	// Cuando se inicialice el componente, se llama todo el conjunto de registros de la BD
	protected override async Task OnInitializedAsync()
	{
		_incomes = await _repository.GetAll();
	}

	private async void Delete(Income income)
	{
		await _repository.Delete(income);
		_incomes!.Remove(income);
		StateHasChanged();
	}
	private void Edit(int id)
	{
		_navigator.NavigateTo($"/incomes/edit/{id}");
	}
	
	// Ordenar por Fecha de Pago
	private async void OrderByPaidDate()
	{
		if (_isAscendingPaidDate)
		{
			_incomes = await _repository.OrderByPaidDateAsc();
		}
		else
		{
			_incomes = await _repository.OrderByPaidDateDesc();
		}
		// Flag
		_isAscendingPaidDate = !_isAscendingPaidDate;
	}
	// Ordenar por Número de Orden
	private async void OrderByOrderNum()
	{
		if (_isAscendingOrderNum)
		{
			_incomes = await _repository.OrderByOrderNumAsc();
		}
		else
		{
			_incomes = await _repository.OrderByOrderNumDesc();
		}
		// Flag
		_isAscendingOrderNum = !_isAscendingOrderNum;
	}
}
